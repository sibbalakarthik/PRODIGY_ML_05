# ----------------------------------
# Food Recognition + Calorie Estimation (ML version)
# Using HOG features + SVM classifier
# ----------------------------------

import os
import cv2
import numpy as np
from skimage.feature import hog
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# -------------------------------
# 1. Dataset Loading
# -------------------------------
# Dataset structure:
# dataset/
#   Apple/
#   Banana/
#   Burger/

data_dir = "dataset"   # change to your dataset path
img_size = 128

X, y = [], []

for label in os.listdir(data_dir):
    class_dir = os.path.join(data_dir, label)
    if not os.path.isdir(class_dir):
        continue
    for img_file in os.listdir(class_dir):
        img_path = os.path.join(class_dir, img_file)
        try:
            img = cv2.imread(img_path)
            img = cv2.resize(img, (img_size, img_size))
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

            # Extract HOG features
            features, _ = hog(gray, orientations=9, pixels_per_cell=(8, 8),
                              cells_per_block=(2, 2), block_norm='L2-Hys',
                              visualize=True, transform_sqrt=True)
            
            X.append(features)
            y.append(label)
        except:
            continue

X = np.array(X)
y = np.array(y)

# -------------------------------
# 2. Train-Test Split
# -------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -------------------------------
# 3. Train SVM Classifier
# -------------------------------
clf = SVC(kernel='linear', probability=True)
clf.fit(X_train, y_train)

# -------------------------------
# 4. Evaluate Model
# -------------------------------
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

# -------------------------------
# 5. Calorie Dictionary
# -------------------------------
calorie_dict = {
    "Apple": 52,
    "Banana": 89,
    "Burger": 295,
    "Pizza": 266,
    "Orange": 47
}

# -------------------------------
# 6. Prediction Function
# -------------------------------
def predict_food(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (img_size, img_size))
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    features, _ = hog(gray, orientations=9, pixels_per_cell=(8, 8),
                      cells_per_block=(2, 2), block_norm='L2-Hys',
                      visualize=True, transform_sqrt=True)

    features = features.reshape(1, -1)
    prediction = clf.predict(features)[0]
    probability = np.max(clf.predict_proba(features)) * 100

    calories = calorie_dict.get(prediction, "Not Available")
    return prediction, calories, probability

# -------------------------------
# 7. Test on Sample Image
# -------------------------------
test_image = "dataset/Apple/1.jpg"  # change this path
food, cal, prob = predict_food(test_image)

print(f"Predicted Food: {food}")
print(f"Estimated Calories: {cal} kcal per 100g")
print(f"Confidence: {prob:.2f}%")
