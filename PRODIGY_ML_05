# Food Recognition + Calorie Estimation Model
# Author: Your Name

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
import numpy as np
import matplotlib.pyplot as plt
import os

# -------------------------
# 1. Define dataset paths
# -------------------------
# Dataset should be structured as:
# dataset/
#    train/
#       Apple/
#       Banana/
#       Burger/
#    test/
#       Apple/
#       Banana/
#       Burger/

train_dir = "dataset/train"
test_dir = "dataset/test"

# -------------------------
# 2. Data preprocessing
# -------------------------
img_size = 128
batch_size = 32

datagen = ImageDataGenerator(rescale=1.0/255, validation_split=0.2)

train_data = datagen.flow_from_directory(
    train_dir,
    target_size=(img_size, img_size),
    batch_size=batch_size,
    class_mode='categorical',
    subset="training"
)

val_data = datagen.flow_from_directory(
    train_dir,
    target_size=(img_size, img_size),
    batch_size=batch_size,
    class_mode='categorical',
    subset="validation"
)

# -------------------------
# 3. Build CNN model
# -------------------------
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(img_size, img_size, 3)),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(train_data.num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# -------------------------
# 4. Train the model
# -------------------------
history = model.fit(
    train_data,
    validation_data=val_data,
    epochs=10
)

# -------------------------
# 5. Food-Calorie Dictionary
# -------------------------
calorie_dict = {
    "Apple": 52,      # calories per 100g
    "Banana": 89,
    "Burger": 295,
    "Pizza": 266,
    "Orange": 47
}

# -------------------------
# 6. Prediction function
# -------------------------
def predict_food(image_path):
    img = load_img(image_path, target_size=(img_size, img_size))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    class_index = np.argmax(prediction)
    class_labels = list(train_data.class_indices.keys())
    predicted_food = class_labels[class_index]

    calories = calorie_dict.get(predicted_food, "Not Available")
    return predicted_food, calories

# -------------------------
# 7. Test on an image
# -------------------------
test_image = "dataset/test/Apple/1.jpg"   # change path
food, cal = predict_food(test_image)

print(f"Predicted Food: {food}")
print(f"Estimated Calories: {cal} kcal per 100g")

# Display image
plt.imshow(load_img(test_image))
plt.title(f"{food} - {cal} kcal/100g")
plt.show()
